{
  "_args": [
    [
      {
        "raw": "react-autocomplete@^1.4.2",
        "scope": null,
        "escapedName": "react-autocomplete",
        "name": "react-autocomplete",
        "rawSpec": "^1.4.2",
        "spec": ">=1.4.2 <2.0.0",
        "type": "range"
      },
      "/Users/owner/wdi/wingIt"
    ]
  ],
  "_from": "react-autocomplete@>=1.4.2 <2.0.0",
  "_id": "react-autocomplete@1.5.3",
  "_inCache": true,
  "_location": "/react-autocomplete",
  "_nodeVersion": "6.6.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-autocomplete-1.5.3.tgz_1494762208016_0.7438643288332969"
  },
  "_npmUser": {
    "name": "cmtegner",
    "email": "christian.tegner@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-autocomplete@^1.4.2",
    "scope": null,
    "escapedName": "react-autocomplete",
    "name": "react-autocomplete",
    "rawSpec": "^1.4.2",
    "spec": ">=1.4.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-autocomplete/-/react-autocomplete-1.5.3.tgz",
  "_shasum": "730da790020b418624109f8309a10a37aa558400",
  "_shrinkwrap": null,
  "_spec": "react-autocomplete@^1.4.2",
  "_where": "/Users/owner/wdi/wingIt",
  "authors": [
    "Ryan Florence <rpflorence@gmail.com>"
  ],
  "bugs": {
    "url": "https://github.com/reactjs/react-autocomplete/issues"
  },
  "dependencies": {
    "dom-scroll-into-view": "1.0.1"
  },
  "description": "Accessible, extensible, Autocomplete for React.js",
  "devDependencies": {
    "babel-cli": "^6.5.1",
    "babel-eslint": "6.1.2",
    "babel-jest": "^13.0.0",
    "babel-preset-es2015": "^6.5.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-react-hmre": "^1.1.1",
    "babel-preset-stage-0": "^6.5.0",
    "babelify": "^7.3.0",
    "browserify": "^13.3.0",
    "browserify-hmr": "^0.3.5",
    "enzyme": "^2.0.0",
    "eslint": "^2.13.1",
    "eslint-config-rackt": "^1.1.1",
    "eslint-plugin-react": "^6.10.3",
    "exorcist": "^0.4.0",
    "jest": "^13.0.0",
    "lodash.flow": "^3.5.0",
    "lodash.map": "^4.6.0",
    "lodash.sortby": "^4.7.0",
    "react": "^0.14.7",
    "react-addons-test-utils": "^0.14.7",
    "react-docgen": "^2.13.0",
    "react-dom": "^0.14.7",
    "scripty": "^1.7.1",
    "st": "^1.2.0",
    "uglify-js": "^2.7.5",
    "watchify": "^3.8.0",
    "youemdee": "^1.0.0"
  },
  "directories": {
    "example": "examples"
  },
  "dist": {
    "shasum": "730da790020b418624109f8309a10a37aa558400",
    "tarball": "https://registry.npmjs.org/react-autocomplete/-/react-autocomplete-1.5.3.tgz"
  },
  "files": [
    "build/lib/index.js",
    "build/lib/Autocomplete.js",
    "dist"
  ],
  "gitHead": "87186ad23041428c59ceae9b2044fdc1d6466ac1",
  "homepage": "https://github.com/reactjs/react-autocomplete",
  "jest": {
    "modulePathIgnorePatterns": [
      "<rootDir>/build/",
      "<rootDir>/dist/"
    ],
    "testPathIgnorePatterns": [
      "<rootDir>/build/",
      "<rootDir>/dist/"
    ],
    "unmockedModulePathPatterns": [
      "<rootDir>/node_modules/react",
      "<rootDir>/node_modules/react-addons-test-utils",
      "<rootDir>/node_modules/enzyme"
    ]
  },
  "keywords": [],
  "license": "MIT",
  "main": "./build/lib/Autocomplete.js",
  "maintainers": [
    {
      "name": "cmtegner",
      "email": "christian.tegner@gmail.com"
    },
    {
      "name": "mzabriskie",
      "email": "mzabriskie@gmail.com"
    },
    {
      "name": "ryanflorence",
      "email": "rpflorence@gmail.com"
    },
    {
      "name": "sprjrx",
      "email": "sprjr@me.com"
    }
  ],
  "name": "react-autocomplete",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.7 || ^15.0.0-0",
    "react-dom": "^0.14.7 || ^15.0.0-0"
  },
  "readme": "# React Autocomplete [![Travis build status](https://travis-ci.org/reactjs/react-autocomplete.svg?branch=master)](https://travis-ci.org/reactjs/react-autocomplete/)\n\nAccessible, extensible, Autocomplete for React.js.\n\n[Examples](https://reactcommunity.org/react-autocomplete/)\n\n## Install\n\n### npm\n\n```bash\nnpm install --save react-autocomplete\n```\n\n### yarn\n\n```bash\nyarn add react-autocomplete\n```\n\n### AMD/UMD\n\n* Development: [https://unpkg.com/react-autocomplete@1.5.2/dist/react-autocomplete.js](https://unpkg.com/react-autocomplete@1.5.2/dist/react-autocomplete.js)\n* Production: [https://unpkg.com/react-autocomplete@1.5.2/dist/react-autocomplete.min.js](https://unpkg.com/react-autocomplete@1.5.2/dist/react-autocomplete.min.js)\n\n## API\n\n### Props\n\n#### `getItemValue: Function`\nArguments: `item: Any`\n\nUsed to read the display value from each entry in `items`.\n\n#### `items: Array`\nThe items to display in the dropdown menu\n\n#### `renderItem: Function`\nArguments: `item: Any, isHighlighted: Boolean, styles: Object`\n\nInvoked for each entry in `items` that also passes `shouldItemRender` to\ngenerate the render tree for each item in the dropdown menu. `styles` is\nan optional set of styles that can be applied to improve the look/feel\nof the items in the dropdown menu.\n\n#### `autoHighlight: Boolean` (optional)\nDefault value: `true`\n\nWhether or not to automatically highlight the top match in the dropdown\nmenu.\n\n#### `inputProps: Object` (optional)\nDefault value: `{}`\n\nProps that are applied to the `<input />` element rendered by\n`Autocomplete`. Any properties supported by `HTMLInputElement` can be\nspecified, apart from the following which are set by `Autocomplete`:\nvalue, autoComplete, role, aria-autocomplete\n\n#### `menuStyle: Object` (optional)\nDefault value:\n```jsx\n{\n  borderRadius: '3px',\n  boxShadow: '0 2px 12px rgba(0, 0, 0, 0.1)',\n  background: 'rgba(255, 255, 255, 0.9)',\n  padding: '2px 0',\n  fontSize: '90%',\n  position: 'fixed',\n  overflow: 'auto',\n  maxHeight: '50%', // TODO: don't cheat, let it flow to the bottom\n}\n```\n\nStyles that are applied to the dropdown menu in the default `renderMenu`\nimplementation. If you override `renderMenu` and you want to use\n`menuStyles` you must manually apply them (`this.props.menuStyles`).\n\n#### `onChange: Function` (optional)\nDefault value: `function() {}`\n\nArguments: `event: Event, value: String`\n\nInvoked every time the user changes the input's value.\n\n#### `onMenuVisibilityChange: Function` (optional)\nDefault value: `function() {}`\n\nArguments: `isOpen: Boolean`\n\nInvoked every time the dropdown menu's visibility changes (i.e. every\ntime it is displayed/hidden).\n\n#### `onSelect: Function` (optional)\nDefault value: `function() {}`\n\nArguments: `value: String, item: Any`\n\nInvoked when the user selects an item from the dropdown menu.\n\n#### `open: Boolean` (optional)\nUsed to override the internal logic which displays/hides the dropdown\nmenu. This is useful if you want to force a certain state based on your\nUX/business logic. Use it together with `onMenuVisibilityChange` for\nfine-grained control over the dropdown menu dynamics.\n\n#### `renderMenu: Function` (optional)\nDefault value:\n```jsx\nfunction(items, value, style) {\n  return <div style={{ ...style, ...this.menuStyle }} children={items}/>\n}\n```\n\nArguments: `items: Array<Any>, value: String, styles: Object`\n\nInvoked to generate the render tree for the dropdown menu. Ensure the\nreturned tree includes `items` or else no items will be rendered.\n`styles` will contain { top, left, minWidth } which are the coordinates\nof the top-left corner and the width of the dropdown menu.\n\n#### `shouldItemRender: Function` (optional)\nArguments: `item: Any, value: String`\n\nInvoked for each entry in `items` and its return value is used to\ndetermine whether or not it should be displayed in the dropdown menu.\nBy default all items are always rendered.\n\n#### `sortItems: Function` (optional)\nArguments: `itemA: Any, itemB: Any, value: String`\n\nThe function which is used to sort `items` before display.\n\n#### `value: Any` (optional)\nDefault value: `''`\n\nThe value to display in the input field\n\n#### `wrapperProps: Object` (optional)\nDefault value: `{}`\n\nProps that are applied to the element which wraps the `<input />` and\ndropdown menu elements rendered by `Autocomplete`.\n\n#### `wrapperStyle: Object` (optional)\nDefault value:\n```jsx\n{\n  display: 'inline-block'\n}\n```\n\nThis is a shorthand for `wrapperProps={{ style: <your styles> }}`.\nNote that `wrapperStyle` is applied before `wrapperProps`, so the latter\nwill win if it contains a `style` entry.\n\n\n### Imperative API\n\nIn addition to the props there is an API available on the mounted element which is similar to that of `HTMLInputElement`. In other words: you can access most of the common `<input>` methods directly on an `Autocomplete` instance. An example:\n\n```jsx\nclass MyComponent extends Component {\n  componentDidMount() {\n    // Focus the input and select \"world\"\n    this.input.focus()\n    this.input.setSelectionRange(6, 11)\n  }\n  render() {\n    return (\n      <Autocomplete\n        ref={el => this.input = el}\n        value=\"hello world\"\n        ...\n      />\n    )\n  }\n}\n```\n\n# Development\nYou can start a local development environment with `npm start`. This command starts a static file server on [localhost:8080](http://localhost:8080) which serves the examples in `examples/`. Hot-reload mechanisms are in place which means you don't have to refresh the page or restart the build for changes to take effect.\n\n## Tests!\n\nRun them:\n`npm test`\n\nWrite them:\n`lib/__tests__/Autocomplete-test.js`\n\nCheck your work:\n`npm run coverage`\n\n## Scripts\nRun with `npm run <script>`.\n\n### gh-pages\nBuilds the examples and assembles a commit which is pushed to `origin/gh-pages`, then cleans up your working directory. Note: This script will `git checkout master` before building.\n\n### release\nTakes the same argument as `npm publish`, i.e. `[major|minor|patch|x.x.x]`, then tags a new version, publishes, and pushes the version commit and tag to `origin/master`. Usage: `npm run release -- [major|minor|patch|x.x.x]`. Remember to update the CHANGELOG before releasing!\n\n### build\nRuns the build scripts detailed below.\n\n### build:component\nTranspiles the source in `lib/` and outputs it to `build/`, as well as creating a UMD bundle in `dist/`.\n\n### build:examples\nCreates bundles for each of the examples, which is used for pushing to `origin/gh-pages`.\n\n### test\nRuns the test scripts detailed below.\n\n### test:lint\nRuns `eslint` on the source.\n\n### test:jest\nRuns the unit tests with `jest`.\n\n### coverage\nRuns the unit tests and creates a code coverage report.\n\n### start\nBuilds all the examples and starts a static file server on [localhost:8080](http://localhost:8080). Any changes made to `lib/Autocomplete.js` and the examples are automatically compiled and transmitted to the browser, i.e. there's no need to refresh the page or restart the build during development. This script is the perfect companion when making changes to this repo, since you can use the examples as a test-bed for development.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/reactjs/react-autocomplete.git"
  },
  "scripts": {
    "build": "scripty",
    "build:component": "scripty",
    "build:examples": "scripty",
    "coverage": "scripty",
    "generate-readme": "scripty",
    "gh-pages": "scripty",
    "release": "scripty",
    "start": "SCRIPTY_PARALLEL=true scripty",
    "test": "scripty",
    "test:jest": "scripty",
    "test:lint": "scripty"
  },
  "tags": [
    "react",
    "autocomplete",
    "combobox",
    "a11y"
  ],
  "version": "1.5.3"
}
